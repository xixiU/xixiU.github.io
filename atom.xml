<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初来的xiaomu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-03T04:07:01.094Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>haha无知</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>桂林电子科技大学ip出校控制器python登陆</title>
    <link href="http://yoursite.com/2017/10/03/%E6%A1%82%E6%9E%97%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6ip%E5%87%BA%E6%A0%A1%E6%8E%A7%E5%88%B6%E5%99%A8%E6%89%B9%E9%87%8F%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2017/10/03/桂林电子科技大学ip出校控制器批量扫描/</id>
    <published>2017-10-03T04:22:41.801Z</published>
    <updated>2017-10-03T04:07:01.094Z</updated>
    
    <content type="html"><![CDATA[<p>2017/10/3卸载了从14年开始使用的py3.4，同时也卸载了pywin插件。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="本文仅供学习，读者需要对自己行为负责，同时产生的行为与本文无关。读者视作默认同意本说明"><a href="#本文仅供学习，读者需要对自己行为负责，同时产生的行为与本文无关。读者视作默认同意本说明" class="headerlink" title="本文仅供学习，读者需要对自己行为负责，同时产生的行为与本文无关。读者视作默认同意本说明"></a>本文仅供学习，读者需要对自己行为负责，同时产生的行为与本文无关。读者视作默认同意本说明</h2><p>程序在17年6月开发(ip出校控制器 2.1.4.0版本)，后来只使用过一两次，就没使用过了，也<code>不打算使用和维护了</code>。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol>
<li>python  (本文使用python3.4)</li>
<li>pywin32 (本文使用pywin32 for py3.4)</li>
<li>ip出校控制器 2.1.4.0版本<br>对于pywin32的安装，<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="external">可以点我，下载相应的pywin32版本</a>，然后点击下一步，下一步安装即可。<h2 id="windows句柄"><a href="#windows句柄" class="headerlink" title="windows句柄"></a>windows句柄</h2>适当了解windows句柄有助于程序的移植，<a href="https://zh.wikipedia.org/zh-hans/%E5%8F%A5%E6%9F%84" target="_blank" rel="external">点我查看，wikipedia上对windows句柄的介绍</a></li>
</ol>
<p>程序中句柄信息，直接通过spy++查找</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>程序思路很简单，就是用py模拟人工输入信息，然后点击按钮。直接上代码；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span><br><span class="line">Created on Thur June 29 16:00:10 2017</span><br><span class="line"></span><br><span class="line">@author: x</span><br><span class="line">"""</span></span><br><span class="line"><span class="keyword">import</span> win32gui,win32api,win32con</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_idxSubHandle</span><span class="params">(pHandle, winClass, index=<span class="number">0</span>)</span>:</span>  </span><br><span class="line">    <span class="string">""" </span><br><span class="line">    已知子窗口的窗体类名 </span><br><span class="line">    寻找第index号个同类型的兄弟窗口 </span><br><span class="line">    pHandle父类句柄</span><br><span class="line">    winclass同类型句柄，index是同类型该句柄的索引</span><br><span class="line">    """</span>  </span><br><span class="line">    <span class="keyword">assert</span> type(index) == int <span class="keyword">and</span> index &gt;= <span class="number">0</span> </span><br><span class="line">    handle = win32gui.FindWindowEx(pHandle, <span class="number">0</span>, winClass, <span class="keyword">None</span>)  </span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">0</span>:  </span><br><span class="line">        handle = win32gui.FindWindowEx(pHandle, handle, winClass, <span class="keyword">None</span>)  </span><br><span class="line">        index -= <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">return</span> handle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_subHandle</span><span class="params">(pHandle, winClassList)</span>:</span>  </span><br><span class="line">    <span class="string">""" </span><br><span class="line">    递归寻找子窗口的句柄 </span><br><span class="line">    pHandle是祖父窗口的句柄 </span><br><span class="line">    winClassList是各个子窗口的class列表，父辈的list-index小于子辈 </span><br><span class="line">    """</span>  </span><br><span class="line">    <span class="keyword">assert</span> type(winClassList) == list  </span><br><span class="line">    <span class="keyword">if</span> len(winClassList) == <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> find_idxSubHandle(pHandle, winClassList[<span class="number">0</span>][<span class="number">0</span>], winClassList[<span class="number">0</span>][<span class="number">1</span>])  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        pHandle = find_idxSubHandle(pHandle, winClassList[<span class="number">0</span>][<span class="number">0</span>], winClassList[<span class="number">0</span>][<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> find_subHandle(pHandle, winClassList[<span class="number">1</span>:])  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guet_connect</span><span class="params">(pHandle,idHandle,id,pwHandle,pw,Button_Handle)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    pHandle为父窗体句柄</span><br><span class="line">    idHandle为客户端用户名句柄</span><br><span class="line">    pwHandle为客户端密码句柄</span><br><span class="line">    Button_Handle为客户端连接按钮句柄</span><br><span class="line">    """</span></span><br><span class="line">    ok_id=win32gui.SendMessage(idHandle, win32con.WM_SETTEXT, <span class="keyword">None</span>, id)</span><br><span class="line">    ok_pw=win32gui.SendMessage(pwHandle, win32con.WM_SETTEXT, <span class="keyword">None</span>, pw)</span><br><span class="line">    ok_button=win32api.SendMessage(pHandle, win32con.WM_COMMAND, <span class="number">1</span>, Button_Handle)</span><br><span class="line"><span class="comment">#     处理之后返回0</span></span><br><span class="line">    <span class="keyword">if</span> ok_id==<span class="number">0</span> <span class="keyword">and</span> ok_pw==<span class="number">0</span> <span class="keyword">and</span> ok_button==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"一次登陆尝试"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_connect</span><span class="params">(pHandle,Button_Handle)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    pHandle为父窗体句柄</span><br><span class="line">    Button_Handle为客户端查询按钮句柄</span><br><span class="line">    """</span></span><br><span class="line">    chaxun_button=win32api.SendMessage(pHandle, win32con.WM_COMMAND, <span class="number">1</span>, Button_Handle)</span><br><span class="line">    <span class="keyword">if</span> chaxun_button==<span class="number">0</span>:</span><br><span class="line">        ie_error_Handle=win32gui.FindWindow(<span class="keyword">None</span>,<span class="string">'http://172.16.1.1/ipmanager/login.jsp?id=0 - Internet Explorer'</span>)<span class="comment">#登陆失败会获取该句柄</span></span><br><span class="line">        ie_ok_Handle=win32gui.FindWindow(<span class="keyword">None</span>,<span class="string">'网络管理系统 - Internet Explorer'</span>)<span class="comment">#登陆成功会获取该句柄</span></span><br><span class="line">        <span class="keyword">if</span> ie_ok_Handle==<span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 登陆成功</span></span><br><span class="line">            print(<span class="string">"success"</span>)</span><br><span class="line">            close_ie=win32gui.PostMessage(ie_ok_Handle, win32con.WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> ie_error_Handle==<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#登陆失败</span></span><br><span class="line">            print(<span class="string">"error"</span>)</span><br><span class="line">            close_ie=win32gui.PostMessage(ie_error_Handle, win32con.WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file</span><span class="params">(student_id,student_pw)</span>:</span></span><br><span class="line">    success_passwd=open(<span class="string">'ok_passwd.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line">    success_passwd.write(<span class="string">'学号:%s\t密码:%s\n'</span>%(student_id,student_pw))</span><br><span class="line">    print(<span class="string">"成功记录一条数据："</span>+<span class="string">'学号:%s\t密码:%s\n'</span>%(student_id,student_pw))</span><br><span class="line">    </span><br><span class="line">    success_passwd.close</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message</span><span class="params">(hwnd)</span>:</span></span><br><span class="line">    buf_size = win32gui.SendMessage(hwnd, win32con.WM_GETTEXTLENGTH) + <span class="number">1</span>  <span class="comment"># 要加上截尾的字节  </span></span><br><span class="line">    str_buffer = win32gui.PyMakeBuffer(buf_size)  <span class="comment"># 生成buffer对象  </span></span><br><span class="line">    win32api.SendMessage(hwnd, win32con.WM_GETTEXT, buf_size, str_buffer)  <span class="comment"># 获取buffer  </span></span><br><span class="line"><span class="comment">#     str_buffer = str(str_buffer[:-1])  # 转为字符串</span></span><br><span class="line">    address, length = win32gui.PyGetBufferAddressAndLen(str_buffer)</span><br><span class="line">    text = win32gui.PyGetString(address, length) </span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ipGUET</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fgFilePath=None)</span>:</span>  </span><br><span class="line">        self.Mhandle = win32gui.FindWindow(<span class="keyword">None</span>,<span class="string">'IP出校控制器'</span>)  </span><br><span class="line"><span class="comment">#         print ("IP 出校器初始化完成,父类句柄为%x"%(self.Mhandle) )</span></span><br><span class="line"><span class="comment">#         TButton0_handle = find_subHandle(self.Mhandle, [("TButton",0)])</span></span><br><span class="line"><span class="comment">#         TButton1_handle = find_subHandle(self.Mhandle,[("TComboBox",0),("Edit",0)])</span></span><br><span class="line">        self.TEdit_id_handle = find_subHandle(self.Mhandle, [(<span class="string">"TEdit"</span>,<span class="number">1</span>)])<span class="comment">#用户名</span></span><br><span class="line">        self.TEdit_pw_handle = find_subHandle(self.Mhandle, [(<span class="string">"TEdit"</span>,<span class="number">0</span>)])<span class="comment">#密码</span></span><br><span class="line">        self.TStatusBar_handle = find_subHandle(self.Mhandle, [(<span class="string">"TStatusBar"</span>,<span class="number">0</span>)])<span class="comment">#版本信息</span></span><br><span class="line">        self.TButton_lianjie_handle=win32gui.FindWindowEx(self.Mhandle,<span class="number">0</span>,<span class="keyword">None</span>,<span class="string">"连接"</span>)</span><br><span class="line">        self.TButton_chaxun_handle=win32gui.FindWindowEx(self.Mhandle,<span class="number">0</span>,<span class="keyword">None</span>,<span class="string">"查询"</span>)</span><br><span class="line">        self.GroupBox_handle= find_subHandle(self.Mhandle, [(<span class="string">"TGroupBox"</span>,<span class="number">0</span>)])<span class="comment">#余额</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self,student_id,student_pw)</span>:</span></span><br><span class="line">        guet_connect(self.Mhandle,self.TEdit_id_handle,student_id,self.TEdit_pw_handle,student_pw,self.TButton_lianjie_handle)</span><br><span class="line">        <span class="comment">#print(get_message(TEdit_id_handle))</span></span><br><span class="line">        check_result=check_connect(self.Mhandle,self.TButton_chaxun_handle)</span><br><span class="line">        <span class="keyword">if</span> check_result==<span class="number">111</span>:</span><br><span class="line">            write_file(student_id,student_pw)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line"><span class="comment">#     win32api.MessageBox(win32con.NULL, 'Python 你好！', '你好', win32con.MB_OK)  </span></span><br><span class="line">    my_ipguet=ipGUET()</span><br><span class="line">    my_ipguet.start(<span class="string">'你的学号'</span>,<span class="string">'你的密码'</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>注释已经写好了,程序只供学习</p>
]]></content>
    
    <summary type="html">
    
      使用spy++,pywin32扫描可用出校信息，出于某些原因，本文只涉及python登陆ip出校控制器，在主函数登陆部分稍加修改可以达到不同的效果。
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>练习项目-CET查分</title>
    <link href="http://yoursite.com/2017/08/13/CET%E5%9B%9B%E5%85%AD%E7%BA%A7%E6%9F%A5%E5%88%86/"/>
    <id>http://yoursite.com/2017/08/13/CET四六级查分/</id>
    <published>2017-08-13T04:39:04.000Z</published>
    <updated>2017-10-03T08:36:04.011Z</updated>
    
    <content type="html"><![CDATA[<p>10/03/2017 更新代理接口，<code>此项目不再更新</code><br>本软件下载地址<br>下载地址：<a href="http://pan.baidu.com/s/1i4SCMfr" target="_blank" rel="external">http://pan.baidu.com/s/1i4SCMfr</a> 密码：5wrm</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="软件说明"><a href="#软件说明" class="headerlink" title="软件说明"></a>软件说明</h2><p>之前一直都是写的python爬虫，最后主要考虑到client运行的实际情况，与python GUI部分没有接触过，开发起来稍微难度比较大。因此选用Java作为开发语言。<br>程序逻辑比较简单，就是细节比较多，修修补补。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>因为是练手，开发时间也比较短，大概2~3天，程序考虑很不完善，但是目前遇到的问题，基本都修复了，<code>如果在使用过程中，遇到问题可以直接评论留言</code><br>(说了这么多还不是因为不会-&gt;-&gt;)</p>
<p><code>一般用户无需浏览以下部分，此部分记录开发工程中遇到的一些问题，方便以后别人或者自己参考</code></p>
<h1 id="开发记录"><a href="#开发记录" class="headerlink" title="开发记录"></a>开发记录</h1><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>为了控制方便，程序采用MVC设计模式，数据接口最开始来源于学信网(学信网在频繁时访问会需要验证码)，正在添加99宿舍接口</p>
<h2 id="Learn-more"><a href="#Learn-more" class="headerlink" title="Learn more"></a>Learn more</h2><ol>
<li>Jsoup.jar 的使用</li>
<li>Swing 传参数</li>
<li>Swing 监听</li>
</ol>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ol>
<li>99宿舍解密不成功，java难以调用</li>
</ol>
]]></content>
    
    <summary type="html">
    
      暑期想到很长世间没有码代码了，于是做了一个四六级查分的小项目。考虑到一些原因采用java编写
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="练习" scheme="http://yoursite.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
      <category term="Java爬虫" scheme="http://yoursite.com/tags/Java%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL进阶学习笔记</title>
    <link href="http://yoursite.com/2017/08/06/MySQL%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2017/08/06/MySQL进阶/</id>
    <published>2017-08-06T15:05:18.228Z</published>
    <updated>2017-08-06T15:05:07.198Z</updated>
    
    <content type="html"><![CDATA[<p>之前只是简单得学习了MySQL的增删查改等，在项目中深感知识不够，于是学习了一下MySQL触发器，存储过程，权限管理等知识。</p>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>触发器就是对有关系的数据表进行操作的一种功能，当满足触发条件，则执行指定的事件。比如商品的库存表和用户的订单表之间，若用户下单，用户订单表会相应增加，而库存表则会相应减少，触发器就可以完成这样的操作。<br>如果不实用触发器，则需要在事件之后，对有关联的数据表手动update。如上订单表与库存表，用户下单后，需要手动更新库存表。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>触发器的组成包括触发对象(谁)，触发事件(做了什么事)，触发事件(时间)，触发之后执行的事件(因前面的做了什么事，需要做什么)</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> &lt;触发器名称&gt;  <span class="comment">--触发器`必须`有名字，最多64个字符</span></span><br><span class="line">&#123; <span class="keyword">before</span> | <span class="keyword">after</span> &#125;  <span class="comment">--触发事件，决定满足条件之后的执行语句，在该条件之前还是之后执行</span></span><br><span class="line">&#123; <span class="keyword">insert</span> | <span class="keyword">update</span> | <span class="keyword">delete</span> &#125;  <span class="comment">--指定触发事件。</span></span><br><span class="line"><span class="keyword">on</span> &lt;表名称&gt;  <span class="comment">--触发器是属于某一个表的:当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活. 我们不能给同一张表的同一个事件安排两个触发器。</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>  <span class="comment">--触发器的执行间隔：FOR EACH ROW子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。</span></span><br><span class="line">&lt;满足条件之后，需要执行的<span class="keyword">SQL</span>语句&gt;  <span class="comment">--触发器包含所要触发的SQL语句，可以是复合语句。</span></span><br></pre></td></tr></table></figure>
<p>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter $ <span class="comment">--修改结束符，以免和SQL语句结束符混淆</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1</span><br><span class="line"><span class="keyword">before</span></span><br><span class="line"><span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> orde</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> <span class="keyword">num</span> = <span class="keyword">num</span>+old.much-new.much <span class="keyword">where</span> gid=old.gid;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></p>
<p><code>注意：不能同时在一个表上建立2个相同类型的触发器</code></p>
<h2 id="new-amp-old"><a href="#new-amp-old" class="headerlink" title="new &amp; old"></a>new &amp; old</h2><p>触发器语句中会涉及到参数传递<br>例如触发条件是delete，则在语句之后之后，会有一条语句被删除，因此若在语句之后执行触发事件，并且需要引用之前的数据，可以采用old这个关键词。<br>又如触发条件是insert，则在语句执行之后，会有一条语句被添加，因此若在语句之后执行触发事件，并且需要引用之前的数据，可以采用new这个关键词。<br>对于update而言，一般new 与old都同时存在。<br><code>注意触发事件before与after的选择：不能在触发之后对之前的数据进行更新</code></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>因为触发器是需要指定表的，因此需要指定数据库。以库存表与用户订单表为例</p>
<ol>
<li><p>新建数据库与表<br>新建表并且随便指定一部分数据 goods为库存表(gid库存标号,name名称,num数量)，orde为订单表(oid订单编号,gid库存编号,much购买商品数目)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> learntrigger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`goods`</span> (</span><br><span class="line">  <span class="string">`gid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`num`</span> <span class="built_in">smallint</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orde`</span> (</span><br><span class="line">  <span class="string">`oid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`much`</span> <span class="built_in">smallint</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个触发器<br>触发器完成如下操作：用户下单之后，库存相应减少.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter $ </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t1</span><br><span class="line"><span class="keyword">before</span></span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> orde</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> goods <span class="keyword">set</span> <span class="keyword">num</span>:=<span class="keyword">num</span>-new.much <span class="keyword">where</span> gid=new.gid;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>完善上述触发器：若用户下单数目，超过库存，则将用户下单的数量自动设置为库存数，以免出现库存为负数的情形<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter $ </span><br><span class="line">create trigger t1</span><br><span class="line">before</span><br><span class="line">insert</span><br><span class="line">on orde</span><br><span class="line">for each row</span><br><span class="line">begin</span><br><span class="line">declare</span><br><span class="line">temp_num int;</span><br><span class="line">select num into temp_num from goods where gid = new.gid;</span><br><span class="line">if new.much &gt; temp_num then</span><br><span class="line">set new.much=temp_num;</span><br><span class="line">end if;</span><br><span class="line">update goods set num:=num-new.much where gid=new.gid;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure></p>
<p><code>这里必须选择before，若为update因为insert之后数据已经生成，这个时候确再去修改insert的值，存在逻辑错误。</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>查看触发器 </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">triggers</span> [<span class="keyword">FROM</span> database_name];</span><br></pre></td></tr></table></figure>
<p> 若有先使用<code>use database_name;</code>则可以不添加<code>[FROM database_name]</code><br> <code>添加\G 参数可以以列的形式显示</code>，如<code>show triggers \G;</code></p>
</li>
<li>删除触发器<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] [database_name.]trigger_name</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="存储过程与游标"><a href="#存储过程与游标" class="headerlink" title="存储过程与游标"></a>存储过程与游标</h1><h2 id="与触发器比较"><a href="#与触发器比较" class="headerlink" title="与触发器比较"></a>与触发器比较</h2><p>存储过程与触发器类似，但是存储过程可以主动调用。参数传递更加灵活，功能增加强大。</p>
<h2 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span>  procedure_name([paraname paratype])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">&lt;<span class="keyword">sql</span>语句&gt;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>调用<br><code>call procedure_name([paraname paratype]);</code><br>paraname 为用户指定的参数名称，paratype可以从in out inout选择<br>in表示输入型参数，out表示输出型参数，inout表示可进可出</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下创建一个输入矩形的宽高，输出矩阵面积，并且判断矩形的宽与高的关系<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line">create procedure p100(width int,height int)</span><br><span class="line">begin</span><br><span class="line">select concat('面积',width*height) as area;</span><br><span class="line">if width&gt;height then</span><br><span class="line">select "宽大于高";</span><br><span class="line">elseif width &lt; height then</span><br><span class="line">select "高大于宽";</span><br><span class="line">else </span><br><span class="line">select "正方形";</span><br><span class="line">end if;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call p1(100,200)$</span><br></pre></td></tr></table></figure></p>
<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>参考文献：</p>
<ul>
<li><a href="http://docs.oracle.com/cd/E19078-01/mysql/mysql-refman-5.1/" target="_blank" rel="external">英文参考文献</a></li>
<li><a href="http://img.jb51.net/shouce/mysql/index.html" target="_blank" rel="external">中文参考文献</a><br>MySQL提供的权限管理，分为连接的权利与执行的权利.<h2 id="连接的权利"><a href="#连接的权利" class="headerlink" title="连接的权利"></a>连接的权利</h2>连接的权利指的是：是否有权限连接MySQL,该部分又MYSQL数据库下面的mysql数据库中的user表段控制。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; <span class="comment">/*此处可以看到有一个mysql数据库*/</span></span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">select</span> host ,<span class="keyword">user</span>,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;<span class="comment">/*查看可以有效连接的用户信息*/</span></span><br><span class="line"><span class="comment">/*host从哪里来、用户名username、密码possword*/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>从上面可以看到对权限的管理主要从user,password,host三个参数来实现控制</p>
<h2 id="执行的权利"><a href="#执行的权利" class="headerlink" title="执行的权利"></a>执行的权利</h2><p>连接上数据库之后，执行SQL语句时还需要进行权限检查。<br>包括执行权限(增删查改)，授予的权限(全局层级,数据库层级,表层级,列层级,子程序层级)的检查</p>
<h2 id="新建具有特定权限的用户"><a href="#新建具有特定权限的用户" class="headerlink" title="新建具有特定权限的用户"></a>新建具有特定权限的用户</h2><p>grand [权限1,选项2,权限3……] on <em>.</em> to username@’set_host’ identified by ‘set_password’；/<em> 授予权限</em>/<br>recoke [权限1,选项2,权限3……] on <em>.</em> to username@’set_host’ identified by ‘set_password’；/<em> 取消权限</em>/<br>其中<code>*.*</code>对应上面授予的权限层级的不同有不同的写法。</p>
<ul>
<li>全局层级<br>全局权限适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。GRANT ALL ON <em>.</em>和REVOKE ALL ON <em>.</em>只授予和撤销全局权限。</li>
<li>数据库层级<br>数据库权限适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。GRANT ALL ON db_name.<em>和REVOKE ALL ON db_name.</em>只授予和撤销数据库权限。</li>
<li>表层级<br>表权限适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</li>
<li>列层级<br>列权限适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指定与被授权列相同的列。</li>
<li>子程序层级<br>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级，并存储在mysql.procs_priv表中。</li>
</ul>
<table>
<thead>
<tr>
<th>权限</th>
<th>意义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>ALL [PRIVILEGES]</td>
<td>设置除GRANT OPTION之外的所有简单权限</td>
</tr>
<tr>
<td>ALTER</td>
<td>允许使用ALTER TABLE</td>
</tr>
<tr>
<td>ALTER ROUTINE</td>
<td>更改或取消已存储的子程序</td>
</tr>
<tr>
<td>CREATE</td>
<td>允许使用CREATE TABLE</td>
</tr>
<tr>
<td>CREATE ROUTINE</td>
<td>创建已存储的子程序</td>
</tr>
<tr>
<td>CREATE TEMPORARY TABLES</td>
<td>允许使用CREATE TEMPORARY TABLE</td>
</tr>
<tr>
<td>CREATE USER</td>
<td>允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</td>
</tr>
<tr>
<td>CREATE VIEW</td>
<td>允许使用CREATE VIEW</td>
</tr>
<tr>
<td>DELETE</td>
<td>允许使用DELETE</td>
</tr>
<tr>
<td>DROP</td>
<td>允许使用DROP TABLE</td>
</tr>
<tr>
<td>EXECUTE</td>
<td>允许用户运行已存储的子程序</td>
</tr>
<tr>
<td>FILE</td>
<td>允许使用SELECT…INTO OUTFILE和LOAD DATA INFILE</td>
</tr>
<tr>
<td>INDEX</td>
<td>允许使用CREATE INDEX和DROP INDEX</td>
</tr>
<tr>
<td>INSERT</td>
<td>允许使用INSERT</td>
</tr>
<tr>
<td>LOCK TABLES</td>
<td>允许对您拥有SELECT权限的表使用LOCK TABLES</td>
</tr>
<tr>
<td>PROCESS</td>
<td>允许使用SHOW FULL PROCESSLIST</td>
</tr>
<tr>
<td>REFERENCES</td>
<td>未被实施</td>
</tr>
<tr>
<td>RELOAD</td>
<td>允许使用FLUSH</td>
</tr>
<tr>
<td>REPLICATION CLIENT</td>
<td>允许用户询问从属服务器或主服务器的地址</td>
</tr>
<tr>
<td>REPLICATION SLAVE</td>
<td>用于复制型从属服务器（从主服务器中读取二进制日志事件）</td>
</tr>
<tr>
<td>SELECT</td>
<td>允许使用SELECT</td>
</tr>
<tr>
<td>SHOW DATABASES</td>
<td>SHOW DATABASES显示所有数据库</td>
</tr>
<tr>
<td>SHOW VIEW</td>
<td>允许使用SHOW CREATE VIEW</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>允许使用mysqladmin shutdown</td>
</tr>
<tr>
<td>SUPER</td>
<td>允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</td>
</tr>
<tr>
<td>UPDATE</td>
<td>允许使用UPDATE</td>
</tr>
<tr>
<td>USAGE</td>
<td>“无权限”的同义词</td>
</tr>
<tr>
<td>GRANT OPTION</td>
<td>允许授予权限</td>
</tr>
</tbody>
</table>
<p><code>注意设置之后需要冲刷权限flush privileges;</code></p>
]]></content>
    
    <summary type="html">
    
      继续学习MySQL的触发器，存储过程，权限管理，感觉对MySQL的认知似乎又深入了一些
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机下caffe与faster-rcnn的only CPU安装</title>
    <link href="http://yoursite.com/2017/08/02/%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu16.04%E7%8E%AF%E5%A2%83%E4%B8%8Bcaffe%E4%B8%8Efaster-rcnn%E7%9A%84only%20CPU%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/08/02/虚拟机Ubuntu16.04环境下caffe与faster-rcnn的only CPU安装/</id>
    <published>2017-08-02T12:26:31.571Z</published>
    <updated>2017-08-02T12:26:31.563Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟机ubuntu下caffe与faster-rcnn的only CPU安装教程.尝试记录安装过程，给以后配置提供参考<br><a href="http://blog.csdn.net/zyb19931130/article/details/53842791" target="_blank" rel="external">主要参考1http://blog.csdn.net/zyb19931130/article/details/53842791</a><br><a href="http://blog.csdn.net/zoro_lov3/article/details/60581174" target="_blank" rel="external">主要参考2http://blog.csdn.net/zoro_lov3/article/details/60581174</a></p>
<h1 id="提前认识"><a href="#提前认识" class="headerlink" title="提前认识"></a>提前认识</h1><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><ul>
<li>RAM :8G</li>
<li>CPU: i5-3230M CPU @ 2.60GHz</li>
<li>OS:Windows8.1</li>
<li>GPU:GT 740M<h2 id="软件环境（VM虚拟机中）"><a href="#软件环境（VM虚拟机中）" class="headerlink" title="软件环境（VM虚拟机中）"></a>软件环境（VM虚拟机中）</h2></li>
<li>OS:Ubuntu 16.04</li>
<li>安装opencv2.4.10<br><code>建议给Ubuntu分配不低于3G的内存</code></li>
</ul>
<h1 id="一般依赖项安装"><a href="#一般依赖项安装" class="headerlink" title="一般依赖项安装"></a>一般依赖项安装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler  </span><br><span class="line">sudo apt-get install libboost-all-dev </span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br><span class="line">sudo apt-get install python-dev </span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br></pre></td></tr></table></figure>
<h1 id="Opencv2-4-10安装"><a href="#Opencv2-4-10安装" class="headerlink" title="Opencv2.4.10安装"></a>Opencv2.4.10安装</h1><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jayrambhia/Install-OpenCV</span><br></pre></td></tr></table></figure>
<h2 id="安装Opencv依赖项"><a href="#安装Opencv依赖项" class="headerlink" title="安装Opencv依赖项"></a>安装Opencv依赖项</h2><p>文件dependencies.sh在Ubuntu目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Ubuntu</span><br><span class="line">sudo ./dependencies.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="安装Opencv2-4-10"><a href="#安装Opencv2-4-10" class="headerlink" title="安装Opencv2.4.10"></a>安装Opencv2.4.10</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="number">2.4</span></span><br><span class="line">sudo chmod +x *.sh </span><br><span class="line">sudo sh ./opencv2_4_10.sh</span><br></pre></td></tr></table></figure>
<p>Opencv安装比较久，安装完成之后会显示<code>OpenCV 2.4.10 ready to be used</code></p>
<h2 id="Opencv测试"><a href="#Opencv测试" class="headerlink" title="Opencv测试"></a>Opencv测试</h2><ol>
<li>切换到opencv下载解压后的文件夹目录下，然后进入sample/c/目录下，编译样例文件，具体如下：<br>cd ~/下载/opencv-2.4.10/samples/c/</li>
</ol>
<p>如下载在Ubuntu/2.4/Opencv中，则输入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd ~/Install-Opencv/Ubuntu/<span class="number">2.4</span>/Opencv/opencv<span class="number">-2.4</span><span class="number">.10</span>/samples/c/</span><br><span class="line"></span><br><span class="line">./build_all.sh</span><br></pre></td></tr></table></figure>
<p>执行完成后，会生成对应的可执行文件</p>
<ol>
<li>运行其中一个样例,如 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./find_ob</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>显示图像则为正确安装</p>
<h1 id="caffe安装"><a href="#caffe安装" class="headerlink" title="caffe安装"></a>caffe安装</h1><h2 id="下载caffe"><a href="#下载caffe" class="headerlink" title="下载caffe"></a>下载caffe</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">git clone --recursive https://github.com/BVLC/caffe.git</span><br></pre></td></tr></table></figure>
<h2 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd caffe</span><br><span class="line">cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit Makefile.config</span><br></pre></td></tr></table></figure>
<p><code>ctrl +F</code>找到以下几行,并做如下修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">去掉注释CPU_ONLY :=<span class="number">1</span>  </span><br><span class="line">注释掉CUDA有关的行：  </span><br><span class="line"><span class="comment">#CUDA_DIR := /usr/local/cuda  </span></span><br><span class="line"><span class="comment">#CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \  </span></span><br><span class="line"><span class="comment">#        -gencode arch=compute_20,code=sm_21 \  </span></span><br><span class="line"><span class="comment">#        -gencode arch=compute_30,code=sm_30 \  </span></span><br><span class="line"><span class="comment">#        -gencode arch=compute_35,code=sm_35 \	   </span></span><br><span class="line"><span class="comment">#        -gencode arch=compute_50,code=sm_50 \  </span></span><br><span class="line"><span class="comment">#        -gencode arch=compute_50,code=compute_50  </span></span><br><span class="line">去掉注释WITH_PYTHON_LAYER := <span class="number">1</span>  </span><br><span class="line">这一行有所改动INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial  </span><br><span class="line">这一行有所改动LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/i386-linux-gnu/hdf5/serial /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial  </span><br><span class="line">注释掉这一行<span class="comment">#TEST_GPUID := 0</span></span><br></pre></td></tr></table></figure></p>
<h2 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make all   </span><br><span class="line">make test  </span><br><span class="line">make runtest  </span><br><span class="line">make pycaffe</span><br></pre></td></tr></table></figure>
<p>若在编译过程中，没有报错 ，则进入下一步</p>
<h2 id="尝试import-caffe"><a href="#尝试import-caffe" class="headerlink" title="尝试import caffe"></a>尝试import caffe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$cd caffe/python  </span><br><span class="line">python  </span><br><span class="line">&gt;&gt;&gt;import caffe</span><br></pre></td></tr></table></figure>
<p>如果没有报错，需要继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir(caffe)</span><br></pre></td></tr></table></figure></p>
<p>如果显示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'AdaDeltaSolver'</span>, <span class="string">'AdaGradSolver'</span>, <span class="string">'AdamSolver'</span>, <span class="string">'Classifier'</span>, <span class="string">'Detector'</span>, <span class="string">'Layer'</span>, </span><br><span class="line"><span class="string">'NesterovSolver'</span>, <span class="string">'Net'</span>, <span class="string">'NetSpec'</span>, <span class="string">'RMSPropSolver'</span>, <span class="string">'SGDSolver'</span>, <span class="string">'TEST'</span>, <span class="string">'TRAIN'</span>,</span><br><span class="line"><span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__path__'</span>, </span><br><span class="line"><span class="string">'__version__'</span>, <span class="string">'_caffe'</span>, <span class="string">'classifier'</span>, <span class="string">'detector'</span>, <span class="string">'get_solver'</span>, <span class="string">'io'</span>, <span class="string">'layer_type_list'</span>,</span><br><span class="line"><span class="string">'layers'</span>, <span class="string">'net_spec'</span>, <span class="string">'params'</span>, <span class="string">'proto'</span>, <span class="string">'pycaffe'</span>, <span class="string">'set_device'</span>, <span class="string">'set_mode_cpu'</span>, <span class="string">'set_mode_gpu'</span>,</span><br><span class="line"><span class="string">'set_random_seed'</span>, <span class="string">'to_proto'</span>]</span><br></pre></td></tr></table></figure></p>
<p>说明安装成功。如果报错，一般是部分依赖项没有安装上，请参考最开始的一般依赖项检查。</p>
<h1 id="py-faster-rcnn的CPU安装"><a href="#py-faster-rcnn的CPU安装" class="headerlink" title="py-faster-rcnn的CPU安装"></a>py-faster-rcnn的CPU安装</h1><h2 id="py-faster-rcnn下载"><a href="#py-faster-rcnn下载" class="headerlink" title="py-faster-rcnn下载"></a>py-faster-rcnn下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">git clone --recursive  https://github.com/rbgirshick/py-faster-rcnn.git</span><br></pre></td></tr></table></figure>
<h2 id="安装安装cython和easydict"><a href="#安装安装cython和easydict" class="headerlink" title="安装安装cython和easydict"></a>安装安装cython和easydict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install cython  </span><br><span class="line">sudo pip install easydict</span><br></pre></td></tr></table></figure>
<h2 id="编译cython并做如下修改"><a href="#编译cython并做如下修改" class="headerlink" title="编译cython并做如下修改"></a>编译cython并做如下修改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd py-faster-rcnn/lib</span><br><span class="line">gedit setup.py</span><br></pre></td></tr></table></figure>
<p><code>crtl+f</code>查找，将setup.py文件中部分行 ，修改为如下所示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CUDA = locate_cuda()  </span></span><br><span class="line"><span class="comment">#self.set_executable('compiler_so', CUDA['nvcc'])  </span></span><br><span class="line"><span class="comment">#Extension('nms.gpu_nms',  </span></span><br><span class="line"><span class="comment">#['nms/nms_kernel.cu', 'nms/gpu_nms.pyx'],  </span></span><br><span class="line"><span class="comment">#library_dirs=[CUDA['lib64']],  </span></span><br><span class="line"><span class="comment">#libraries=['cudart'],  </span></span><br><span class="line"><span class="comment">#language='c++',  </span></span><br><span class="line"><span class="comment">#runtime_library_dirs=[CUDA['lib64']],  </span></span><br><span class="line"><span class="comment"># this syntax is specific to this build system  </span></span><br><span class="line"><span class="comment"># we're only going to use certain compiler args with nvcc and not with  </span></span><br><span class="line"><span class="comment"># gcc the implementation of this trick is in customize_compiler() below  </span></span><br><span class="line"><span class="comment">#extra_compile_args=&#123;'gcc': ["-Wno-unused-function"],  </span></span><br><span class="line"><span class="comment">#                    'nvcc': ['-arch=sm_35',  </span></span><br><span class="line"><span class="comment">#                             '--ptxas-options=-v',  </span></span><br><span class="line"><span class="comment">#                             '-c',  </span></span><br><span class="line"><span class="comment">#                             '--compiler-options',  </span></span><br><span class="line"><span class="comment">#                             "'-fPIC'"]&#125;,  </span></span><br><span class="line"><span class="comment">#include_dirs = [numpy_include, CUDA['include']]  </span></span><br><span class="line"><span class="comment">#),</span></span><br></pre></td></tr></table></figure></p>
<p>编译 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p>
<h2 id="修改并编译caffe"><a href="#修改并编译caffe" class="headerlink" title="修改并编译caffe"></a>修改并编译caffe</h2><ol>
<li><p>直接到之前的caffe目录，找到Makefile.config，然后复制粘贴到/py-faster-rcnn/caffe-fast-rcnn/</p>
</li>
<li><p>打开CMakeLists.txt，做如下修改（OFF改成ON）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caffe_option(CPU_ONLY  &quot;Build Caffe without CUDA support&quot; ON) # TODO: rename to USE_CUDA</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译cafe</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/py-faster-rcnn/caffe-fast-rcnn  </span><br><span class="line">make -j8&amp;&amp; make pycaffe</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="下载测试文件"><a href="#下载测试文件" class="headerlink" title="下载测试文件"></a>下载测试文件</h2><ul>
<li><p>采用ubuntu下载</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/py-faster-rcnn  </span><br><span class="line">./data/scripts/fetch_faster_rcnn_models.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部下载工具下载，然后移动到py-faster-rcnn/data中<br><a href="https://dl.dropboxusercontent.com/s/o6ii098bu51d139/faster_rcnn_models.tgz?dl=0" target="_blank" rel="external">下载链接https://dl.dropboxusercontent.com/s/o6ii098bu51d139/faster_rcnn_models.tgz?dl=0</a></p>
</li>
</ul>
<p>下载完成之后 ，解压<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf faster_rcnn_models.tgz -C ./</span><br></pre></td></tr></table></figure></p>
<h2 id="修改部分文件"><a href="#修改部分文件" class="headerlink" title="修改部分文件"></a>修改部分文件</h2><ol>
<li><p>修改/py-faster-rcnn/lib/fast_rcnn/config.py文件（True改成False）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Use GPU implementation of non-maximum suppression</span><br><span class="line">__C.USE_GPU_NMS = False</span><br></pre></td></tr></table></figure>
</li>
<li><p>将/py-faster-rcnn/tools/test_net.py和 /py-faster-rcnn/tools/train_net.py的caffe.set_mode_gpu()修改为caffe.set_mode_cpu().</p>
</li>
<li><p>修改/py-faster-rcnn/lib/fast_rcnn/nms_wrapper.py文件（注释该引用，并将False改成True）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#from nms.gpu_nms import gpu_nms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nms</span><span class="params">(dets, thresh, force_cpu=True)</span>:</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="运行demo"><a href="#运行demo" class="headerlink" title="运行demo"></a>运行demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/py-faster-rcnn  </span><br><span class="line">sudo ./tools/demo.py --cpu</span><br></pre></td></tr></table></figure>
<p>如果显示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syncedmem.hpp:<span class="number">25</span>] Check failed: *ptr host allocation of size <span class="number">345600000</span> failed</span><br><span class="line">*** Check failure stack trace: ***</span><br><span class="line">已放弃 (核心已转储)</span><br></pre></td></tr></table></figure></p>
<p>个人猜测是内存不足的原因，如有其他解决方案，烦请评论提醒。此处尝试更换测试数据集，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/py-faster-rcnn  </span><br><span class="line">sudo ./tools/demo.py --cpu  --net zf</span><br></pre></td></tr></table></figure></p>
<p>稍等片刻既可</p>
<h1 id="最后清理系统垃圾"><a href="#最后清理系统垃圾" class="headerlink" title="最后清理系统垃圾"></a>最后清理系统垃圾</h1><p>在安装过程中，可能产生系统垃圾或者不需要的软件，可以将其清理掉<br><a href="http://xixiu.github.io/2017/07/09/python3-selenium3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BB%96%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/" target="_blank" rel="external">点这里</a>参考这篇博客解决</p>
]]></content>
    
    <summary type="html">
    
      虚拟机ubuntu下caffe与faster-rcnn的only CPU安装教程.尝试记录安装过程，给以后配置提供参考
    
    </summary>
    
      <category term="deep learning" scheme="http://yoursite.com/categories/deep-learning/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="rcnn" scheme="http://yoursite.com/tags/rcnn/"/>
    
  </entry>
  
  <entry>
    <title>selenium3环境配置及其他细节优化</title>
    <link href="http://yoursite.com/2017/07/09/python3-selenium3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E4%BB%96%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/09/python3-selenium3环境配置及其他细节优化/</id>
    <published>2017-07-09T03:47:16.003Z</published>
    <updated>2017-07-09T03:47:15.979Z</updated>
    
    <content type="html"><![CDATA[<p>之前在windows使用的firefox和chrome都是绿色版，配置的selenium3一直没有成功，于是尝试着在Linux下配置，成功配置了！</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>OS: Linux ubuntu 16.04<br>python3:Python 3.5.2<br>Firefox默认安装</p>
<h1 id="下载安装selenium3"><a href="#下载安装selenium3" class="headerlink" title="下载安装selenium3"></a>下载安装selenium3</h1><h2 id="确定操作系统架构"><a href="#确定操作系统架构" class="headerlink" title="确定操作系统架构"></a>确定操作系统架构</h2><p>   打开<code>终端</code>，输入<code>sudo uname -p</code></p>
<ul>
<li>若返回<code>i686</code>，证明为32为操作系统</li>
<li>若返回<code>x86_64</code>,证明为64位操作系统</li>
</ul>
<h2 id="安装selenium3"><a href="#安装selenium3" class="headerlink" title="安装selenium3"></a>安装selenium3</h2><p>   对于同时安装python2与python3的环境而言，采用<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install selenium3</span><br></pre></td></tr></table></figure></p>
<p>   若提示权限不够，加上sudo，即<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 -m pip install selenium3</span><br></pre></td></tr></table></figure></p>
<h2 id="下载geckodriver"><a href="#下载geckodriver" class="headerlink" title="下载geckodriver"></a>下载geckodriver</h2><p>   若firefox版本过高，需要安装geckodriver<br>   这里是<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="external">下载地址</a><br>   选择对应操作系统版本的下载，然后<code>解压，并进入解压之后的目录</code>，接着<br>   安装geckodriver <code>记住要在解压之后的父目录操作</code><br>   cp geckodriver /usr/local/bin/</p>
<h2 id="安装xvfb"><a href="#安装xvfb" class="headerlink" title="安装xvfb"></a>安装xvfb</h2><p>sudo apt-get install xvfb</p>
<h2 id="安装pyvirtualdisplay"><a href="#安装pyvirtualdisplay" class="headerlink" title="安装pyvirtualdisplay"></a>安装pyvirtualdisplay</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install pyvirtualdisplay</span><br></pre></td></tr></table></figure>
<h1 id="测试selenium3"><a href="#测试selenium3" class="headerlink" title="测试selenium3"></a>测试selenium3</h1><p> 复制以下代码，保存为test.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"python开发"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment">#等待5s，关闭浏览器。</span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p>
<p>然后运行</p>
<p>若报错<code>selenium.common.exceptions.WebDriverException: Message: &#39;geckodriver&#39; executable may have wrong permissions</code></p>
<ul>
<li>定位到之前geckodriver的目录，设置权限为-rwxr-xr-x<br>即<code>sudo chmod 755 geckodriver</code></li>
</ul>
<h1 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h1><h2 id="PYPI-更换国内源"><a href="#PYPI-更换国内源" class="headerlink" title="PYPI 更换国内源"></a>PYPI 更换国内源</h2><p>在安装过程中，发现默认的安装源太慢，可以通过更换国内源来提速。<br>笔者这边较快的源是<a href="https://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="external">阿里源</a>和<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">清华源</a></p>
<ul>
<li>WINDOWS更换<br>找到python的安装目录，定位到\Lib\site-packages\pip\目录，然后打开cmdoptions.py，搜索index_url<br>得到如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index_url = partial(</span><br><span class="line">    Option,</span><br><span class="line">    <span class="string">'-i'</span>, <span class="string">'--index-url'</span>, <span class="string">'--pypi-url'</span>,</span><br><span class="line">    dest=<span class="string">'index_url'</span>,</span><br><span class="line">    metavar=<span class="string">'URL'</span>,</span><br><span class="line">    default=PyPI.simple_url,</span><br><span class="line">    </span><br><span class="line">    help=<span class="string">"Base URL of Python Package Index (default %default). "</span></span><br><span class="line">         <span class="string">"This should point to a repository compliant with PEP 503 "</span></span><br><span class="line">         <span class="string">"(the simple repository API) or a local directory laid out "</span></span><br><span class="line">         <span class="string">"in the same format."</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>修改为以下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">index_url = partial(</span><br><span class="line">    Option,</span><br><span class="line">    <span class="string">'-i'</span>, <span class="string">'--index-url'</span>, <span class="string">'--pypi-url'</span>,</span><br><span class="line">    dest=<span class="string">'index_url'</span>,</span><br><span class="line">    metavar=<span class="string">'URL'</span>,</span><br><span class="line">    <span class="comment">#default=PyPI.simple_url,</span></span><br><span class="line">    <span class="comment">#清华源</span></span><br><span class="line">    <span class="comment">#default='https://pypi.tuna.tsinghua.edu.cn/simple',</span></span><br><span class="line">    <span class="comment">#阿里源</span></span><br><span class="line">    default=<span class="string">'https://mirrors.aliyun.com/pypi/simple/'</span>,</span><br><span class="line">    </span><br><span class="line">    help=<span class="string">"Base URL of Python Package Index (default %default). "</span></span><br><span class="line">         <span class="string">"This should point to a repository compliant with PEP 503 "</span></span><br><span class="line">         <span class="string">"(the simple repository API) or a local directory laid out "</span></span><br><span class="line">         <span class="string">"in the same format."</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>清华源和阿里源可以自己选择，只需要将另外的注释掉就可以了</code></p>
<ul>
<li>Linux更换<br>在/.pip/下新建或修改pip.conf为<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意</code><br>在添加源的时候，要使用加密链接，即https。若使用http，需要添加–trusted-host这一参数<br>以上方法是采用修改默认源的方法，还可以在安装的时候，指定安装源，使用pip -i参数.如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 -m pip install selenium3 -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure></p>
<p>同理，若使用http，需要添加–trusted-host这一参数</p>
<h2 id="pip-升级所有package"><a href="#pip-升级所有package" class="headerlink" title="pip 升级所有package"></a>pip 升级所有package</h2><ul>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze --local | grep -v <span class="string">'^\-e'</span> | cut -d = -f <span class="number">1</span>  | xargs -n1 pip install -U</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip" target="_blank" rel="external">参考来源</a></p>
<ul>
<li>采用pip 先列出outdate，再升级<br>即</li>
</ul>
<ol>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip list --outdate --format=freeze &gt;&gt;update3.txt</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>update3.txt为输出outdate的文件</p>
<ol>
<li>打开update3.txt，去掉所有package后面的版本信息，也就是==以及以后的信息<br>如pyOpenSSL==0.15.1 修改为pyOpenSSL</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install -r update3.txt -U</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="ubuntu清理垃圾"><a href="#ubuntu清理垃圾" class="headerlink" title="ubuntu清理垃圾"></a>ubuntu清理垃圾</h2><ol>
<li><p>清理apt载安装软件缓存文件<br>$sudo apt-get clean</p>
</li>
<li><p>清理期软件包<br>$sudo apt-get autoclean</p>
</li>
<li><p>自卸载没软件依赖关系软件<br>$sudo apt-get autoremove</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      ubuntu下python3+selenium3环境配置，以及更换PYPI国内源、pip升级所有package、ubuntu清理垃圾
    
    </summary>
    
      <category term="python爬虫" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>毕业啦</title>
    <link href="http://yoursite.com/2017/07/04/%E9%87%8D%E6%9B%B4/"/>
    <id>http://yoursite.com/2017/07/04/重更/</id>
    <published>2017-07-04T02:45:55.206Z</published>
    <updated>2017-07-04T02:45:55.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="临近毕业，本站重新开始更新。"><a href="#临近毕业，本站重新开始更新。" class="headerlink" title="临近毕业，本站重新开始更新。"></a>临近毕业，本站重新开始更新。</h1><h2 id="毕业了"><a href="#毕业了" class="headerlink" title="毕业了"></a>毕业了</h2><p>python爬虫也很长一段时间没有进一步学习了，最近准备重新学习，期待自己以后可以坚持学习，并留下相关的脚印。<code>请大神手下留情</code> </p>
<p><code>计划学习以下内容</code></p>
<ol>
<li>python3爬虫及相关</li>
<li>图像处理</li>
<li>机器学习</li>
</ol>
<h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>若有问题，请直接留言，我会尽快回复<br><code>不知道会不会有读者,,,</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本页面在搭建过程中主要参考以下页面</p>
<ol>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Hexo官方文档</a></li>
<li><a href="http://lss53.github.io/" target="_blank" rel="external">lss53</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      临近毕业，本站重新开始更新，期待自己可以坚持
    
    </summary>
    
      <category term="说明" scheme="http://yoursite.com/categories/%E8%AF%B4%E6%98%8E/"/>
    
    
  </entry>
  
</feed>
